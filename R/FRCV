##########################################################################################
# Functions for cross-validation of FR models
##########################################################################################
new.GA <- function(cov, coef){
  predi <- as.matrix(cov)%*%t(coef)
  return(predi)
}
rmse <- function(x,y){return(sqrt(((x-y)^2)/length(x)))}
##########################################################################################

FR.model = function(df.y, CV = TRUE){
 #' df.y is a data.frame containing the following colunms:
 #' environment (factor), genotype (factor), GxE or G+GxE effects (numeric) and covariates (numeric).
 #' attention: the number of covariates must to be lower than the number of observations (ordinary least squares limitations)
 
  Y = df.y[,c(1,2,3)]
  names(Y) = c("env","gid","value")
  Y$env = as.factor(Y$env)
  df.cov = df.y[,-c(1:3)]
  form="value~0"
  nenv = nlevels(Y$env)
  
  for(LP in 1:length(names(df.cov))){form=paste(form,"+",names(df.cov)[LP],sep="")}
  
  form = as.formula(form)
  Y = cbind(Y,df.cov)
  out.coef =c()
  out.ss   =c()
  predK    =c()
  acc <- data.frame(acc=matrix(NA,nrow = nenv))
  
  if(CV == TRUE){
    for(K in 1:nenv){
      trt = which(Y == levels(Y$env)[K])
      Ycopy = Y
      Ycopy$value[trt] = NA
      
      modelK = ddply(Ycopy, .(gid), function(x) coef(lm(form,x)))
      anovaK = ddply(Ycopy, .(gid), function(x) data.frame(source=rownames(anova(lm(form,x))),anova(lm(form,x))))
      predK  = melt(ddply(Ycopy, .(gid), function(x) predict(lm(form,x))))
      out.coef = rbind(out.coef ,data.frame(modelK,boot=K))
      out.ss   = rbind(out.ss   ,data.frame(anovaK,boot=K))
      }
    }
  if(CV == FALSE){
    Ycopy = Y
    modelK = ddply(Ycopy, .(gid), function(x) coef(lm(form,x)))
    anovaK = ddply(Ycopy, .(gid), function(x) data.frame(source=rownames(anova(lm(form,x))),anova(lm(form,x))))
    predK  = melt(ddply(Ycopy, .(gid), function(x) predict(lm(form,x))))
    out.coef = rbind(out.coef ,data.frame(modelK,boot=1))
    out.ss   = rbind(out.ss   ,data.frame(anovaK,boot=1))
  }

    
  return(list(coefficients=out.coef,SS=out.ss,predict=predK))
}
